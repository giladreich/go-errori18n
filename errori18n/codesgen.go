//go:build ignore

package main

import (
	"fmt"
	"os"
	"os/exec"
	"regexp"
)

func run() error {
	langData, err := os.ReadFile("errori18n/language/en.yaml")
	if err != nil {
		return err
	}

	genFile := "errori18n/codes.go"

	codes := "package errori18n\n\n"
	codes += "type ErrorCode string\n\n"
	codes += "// Auto-generated using `go run errori18n/codesgen.go`. Please do not edit this file.\n"
	codes += "const (\n"
	codes += "\tERR_UNKNOWN ErrorCode = \"ERR_UNKNOWN\"\n"

	re := regexp.MustCompile(`(ERR_[\w\d]+):\s["']+`)
	errorCodes := re.FindAllStringSubmatch(string(langData), -1)
	if errorCodes == nil {
		return fmt.Errorf("ERROR: language/en.yaml seems empty.")
	}
	for _, errorCode := range errorCodes {
		codes += fmt.Sprintf("\t%s ErrorCode = \"%s\"\n", errorCode[1], errorCode[1])
	}

	codes += ")\n"
	if err := os.WriteFile(genFile, []byte(codes), 0644); err != nil {
		return err
	}

	cmd := exec.Command("go", "fmt", genFile)
	if err := cmd.Run(); err != nil {
		return err
	}

	return nil
}

func main() {
	if err := run(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
